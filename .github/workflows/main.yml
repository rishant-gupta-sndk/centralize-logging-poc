name: PR Gatekeeper

on:
  # push:
  #   branches:
  #     - main
  schedule:
    - cron: '0 * * * *'
  pull_request:
    types:
      - labeled
  workflow_dispatch:
    inputs:
      ref:
        type: string
        description: Git ref to test
      services:
        type: string
        description: Comma-separated list of services

jobs:
  example_job:
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v2
  
        - name: Run a command and capture output
          id: capture_output
          run: |
            echo "OUTPUT=$(date)" >> $GITHUB_ENV
            data=rishant
            echo "DOCKER_TAG_GIT_COMMIT_ID=$data" >> $GITHUB_ENV
  
        - name: Use the output in a script
          run: |
            echo "The captured output is $OUTPUT"
            echo "The latest git commit id: $DOCKER_TAG_GIT_COMMIT_ID"

  example_job2:
      runs-on: ubuntu-latest  
      steps:
        - name: Check Trigger
          run: |
            if [[ "${{ github.event_name }}" == "schedule" ]]; then
              echo "Workflow triggered by schedule."
            elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "Workflow triggered by pull request label ${{ github.event.label.name }}."
            elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
              echo "Workflow triggered manually. Environment: ${{ github.event.inputs.environment }}"
            fi
  print:
    runs-on: ubuntu-latest
    # outputs:
    #   print-inputs-outputs: ${{steps.print-inputs.outputs}}
    steps:
      - name: Print Inputs
        id: print-inputs
        run: |
          echo "Message ${{ toJSON(github.event) }}"
          echo "Rishant Testing - Caller Workflow"
          printenv
          # export DOCKER_TAG_GIT_COMMIT_ID=$(git rev-parse HEAD)
          # export DOCKER_TAG_VERSION_GIT_COMMIT_ID=$(date +%Y.%m.%d)          
          # echo "DOCKER_TAG_GIT_COMMIT_ID=$(git rev-parse HEAD)" >> $GITHUB_ENV;
          echo "DOCKER_TAG_VERSION_GIT_COMMIT_ID=$(date +%Y.%m.%d)" >> $GITHUB_ENV;
          # echo $DOCKER_TAG_GIT_COMMIT_ID
          echo $DOCKER_TAG_VERSION_GIT_COMMIT_ID
          echo "Print GITHUB_ENV: $GITHUB_ENV "
  reuseable:
    needs: [print]
    uses: ./.github/workflows/reuseable_workflow.yaml
    secrets: inherit
    with:
      mode: "testing"
      business-unit: "IN"
      env_json: ""
      # env_json: ${{ needs.print.outputs.print-inputs-outputs }}
    
